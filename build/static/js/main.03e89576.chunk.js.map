{"version":3,"sources":["component/navBar.jsx","component/body/transactionForm.jsx","component/body/bodyComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","style","color","padding","TransactionSchema","yup","shape","money","required","note","trim","min","useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","toast","configure","TransactionForm","props","addTransaction","useForm","validationSchema","register","handleSubmit","errors","classes","Fragment","onSubmit","data","e","console","log","autoClose","target","reset","noValidate","autoComplete","TextField","name","inputRef","error","helperText","placeholder","id","InputProps","startAdornment","InputAdornment","position","icon","faRupeeSign","message","faStickyNote","type","class","BodyComponent","useState","transactions","setTransaction","sum","reduce","accumulator","currentValue","key","scope","map","trans","uuidv4","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.03e89576.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navBar.css\";\n\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-light\">\n      <div>\n        <span className=\"navbar-brand\">\n          <span style={{ color: \"white\", padding: \"10px\" }}>\n            <b>ExpenseTracker</b>\n          </span>\n        </span>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { InputAdornment, TextField } from \"@material-ui/core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRupeeSign, faStickyNote } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TransactionSchema = yup.object().shape({\n  money: yup.number().required(),\n  note: yup\n    .string()\n    .trim()\n    .min(10, \"Note must be at least 10 characters\")\n    .required(),\n    \n});\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n        width: \"25ch\"\n      }\n    }\n  })\n);\n\ntoast.configure();\n\nconst TransactionForm = props => {\n  const notify = () => toast(\"Transaction successfull.\", {\n    autoClose:1000\n  });\n  // const infoNotify = () => toast.info(\"For Income (+) or Expense (-) in Money field.\", {\n  //   position: toast.POSITION.TOP_CENTER,\n  //   autoClose:2000\n  // });\n\n  const { addTransaction } = props;\n  const { register, handleSubmit, errors } = useForm({\n    validationSchema: TransactionSchema\n  });\n  const onSubmit = (data, e) => {\n    console.log(data);\n    addTransaction(data);\n    notify();\n    e.target.reset();\n  };\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        className={classes.root}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <div className=\"container\">\n          <TextField\n            name=\"money\"\n            inputRef={register}\n            error={!!errors.money}\n            helperText={errors.money ? \"Money must be a number\" : \"\"}\n            placeholder=\"Money\"\n            id=\"Money\"\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <FontAwesomeIcon className=\"font-icon\" icon={faRupeeSign} />\n                </InputAdornment>\n              )\n            }}\n          />\n          <TextField\n            name=\"note\"\n            inputRef={register}\n            error={!!errors.note}\n            helperText={errors.note ? errors.note.message : \"\"}\n            placeholder=\"Note\"\n            id=\"note\"\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <FontAwesomeIcon className=\"font-icon\" icon={faStickyNote} />\n                </InputAdornment>\n              )\n            }}\n          />\n          <button type=\"submit\" class=\"btn btn-outline-success btn-sm\">Submit</button>          \n        </div>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default TransactionForm;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./bodyComponent.css\";\nimport TransactionForm from \"./transactionForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRupeeSign } from \"@fortawesome/free-solid-svg-icons\";\n\nconst BodyComponent = () => {\n  // let date = Date.now();\n\n  const [transactions, setTransaction] = useState([\n    {\n      data: {\n        money: \"\",\n        note: \"\"\n      }\n    }\n  ]);\n  const addTransaction = data => {\n    setTransaction([{ data }, ...transactions]);\n  };\n\n  // let sum = 0;\n  // for (let i = 0; i < transactions.length; i++) {\n  //   sum = sum + transactions[i].data.money;\n  // }\n  let sum = transactions.reduce((accumulator, currentValue) => {\n   return accumulator + currentValue.data.money;\n  }, 0);\n  return (\n    <div className=\"flex-container\">\n      <div className=\"left-box\">\n        <div className=\"left-box-in-1\">\n          <span className=\"mx-2\">\n            <FontAwesomeIcon className=\"font-icon mx-1\" icon={faRupeeSign} />\n            Your Balance:\n            <b> {sum !== 0 ? sum : \"\"}</b>\n            <br />\n          </span>\n\n          {transactions[0].data.money > 0 && (\n            <span className=\"mx-2\">\n              <FontAwesomeIcon className=\"font-icon mx-1\" icon={faRupeeSign} />\n              Income:\n              <b> {transactions[0].data.money}</b>\n              <br />\n            </span>\n          )}\n\n          {transactions[0].data.money < 0 && (\n            <span className=\"mx-2\">\n              <FontAwesomeIcon className=\"font-icon mx-1\" icon={faRupeeSign} />\n              Expanse:\n              <b> {-transactions[0].data.money}</b>\n            </span>\n          )}\n        </div>\n\n        <div className=\"left-box-in-2\">\n          <TransactionForm addTransaction={addTransaction} />\n        </div>\n        <div className=\"left-box-in-3\">\n          <p>\n            <b>Negative</b> sign with Expense.\n            <br />\n            <b>No</b> sign with Income.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"right-box\">\n        <div className=\"right-box-in-1\">\n          <h6>Transaction History</h6>\n        </div>\n        <div className=\"container\">\n          <div className=\"right-box-in-2\">\n            <table className=\"table\">\n              <thead>\n                <tr key=\"1\">\n                  <th scope=\"col\">Income</th>\n                  <th scope=\"col\">Expanse</th>\n                  <th scope=\"col\">Note</th>\n                </tr>\n              </thead>\n              <tbody>\n                {transactions.map(trans => (\n                  <tr key={uuidv4()}>\n                    <td>{trans.data.money >= 0 ? trans.data.money : \"\"}</td>\n                    <td>{trans.data.money < 0 ? -trans.data.money : \"\"}</td>\n                    <td>{trans.data.note}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BodyComponent;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport NavBar from './component/navBar';\nimport BodyComponent from './component/body/bodyComponent';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <BodyComponent />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <BrowserRouter>\n  <App />\n </BrowserRouter> \n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}